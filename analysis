#!/usr/bin/env bash

# ------------------------------------------------------------------------------
# Author: <Ryan Chang>
# Script Name: analysis
# Description: Analyze a board game dataset (TSV format) to extract statistical insights.
#              This script performs the following:
#              - Finds the most popular game mechanic (column 13) and domain (column 14)
#              - Calculates average values for publication year, rating, and complexity
#              - Computes Pearson correlation coefficients between:
#                  • Year of publication and average rating
#                  • Game complexity and average rating
#              It handles data cleaning, multiple comma-separated values, and reports
#              errors for missing or insufficient data.
# Usage: ./analysis <file>
# ------------------------------------------------------------------------------

# Check the number of arguments
# If the number is not 1, print error message
if [[ $# != 1 ]]
then
    echo "Error: The number of arguments does not match" >&2
    exit 1
fi

file="$1"

# Check file existence and permissions
if [[ ! -f "$file"  ]]; then
    echo "Error: File '$file' is not found." >&2
    exit 1
fi
if [[ ! -r "$file" ]]; then
    echo "Error: File '$file' is not readable." >&2
    exit 1
fi

# Find the most popular mechanic
# 1. Extract Mechanics field (column 13) and skip empty entries and header
# 2. Spread multiple mechanics (comma-separated) into individual lines
# 3. Remove leading and trailing spaces or tabs from each mechanic
# 4. Remove blank lines caused by empty or malformed entries
# 5. Replace internal spaces with underscores for reliable field separation
# 6. Sort all mechanics alphabetically
# 7. Count each unique mechanic
# 8. Sort mechanics by frequency in descending order
# 9. Select the most frequent mechanic
# 10. Print formatted output with mechanic name and count, restoring spaces
awk -F '\t' 'NR > 1 && $13 != "" { print $13 }' "$file"\
| sed 's/,/\n/g' \
| sed 's/^[ \t]*//;s/[ \t]*$//' \
| grep -v '^$' \
| sed 's/ /_/g' \
| sort \
| uniq -c \
| sort -nr \
| head -n 1 \
| awk '{print "The most popular game mechanics is " $2 " found in " $1 " games"}' \
| sed 's/_/ /g'

# Find the most popular domain
# 1. Extract Domains field (column 14) and skip empty entries and header
# 2. Spread multiple values (comma-separated) into individual lines
# 3. Remove leading and trailing spaces or tabs from each domain
# 4. Remove blank lines caused by empty or malformed entries
# 5. Replace internal spaces with underscores for reliable field parsing
# 6. Sort all domains alphabetically
# 7. Count each unique domain
# 8. Sort domains by frequency in descending order
# 9. Select the most frequent domain
# 10. Print formatted output with domain name and count, restoring spaces
awk -F '\t' 'NR > 1 && $14 != "" { print $14 }' "$file" \
| sed 's/,/\n/g' \
| sed 's/^[ \t]*//;s/[ \t]*$//' \
| grep -v '^$' \
| sed 's/ /_/g' \
| sort \
| uniq -c \
| sort -nr \
| head -n 1 \
| awk '{print "The most game domain is " $2 " found in " $1 " games"}' \
| sed 's/_/ /g'

# Count the average value of publication year, average rating and game complexity
# Year Published: $3, Rating Average: $9, Complexity Averafe: $11
avg_list=($(awk -F '\t' '
   NR > 1 {
        if ($3 != "") {
            total_year += $3
            num_year++
        }
        if($9 != ""){
            total_rating += $9
            num_rating++
        }
        if($11 != ""){
            total_complexity += $11
            num_complexity++
        }
    }
    END {
        print total_year / num_year, total_rating / num_rating, total_complexity / num_complexity
    }
' "$file"
))

avg_year=${avg_list[0]}
avg_rating=${avg_list[1]}
avg_complexity=${avg_list[2]}

# Calculate the correlation between publication year and average rating
awk -F '\t' -v avg_year="$avg_year" -v avg_rating="$avg_rating" '
    NR > 1 && $3 != "" && $9 != "" {
        dx = $3 - avg_year
        dy = $9 - avg_rating
        sum_xy += dx * dy
        sum_x2 += dx * dx
        sum_y2 += dy * dy
    }
    END {
        if (sum_x2 > 0 && sum_y2 > 0) {
            r = sum_xy / sqrt(sum_x2 * sum_y2)
            printf "The correlation between the year of publication and the average rating is %.3f\n", r
        } else {
            print "Error: Insufficient data to compute correlation (Year vs Rating)" > "/dev/stderr"
            exit 1
        }
    }
' "$file"

# Calculate the correlation between game complexity and average rating
awk -F '\t' -v avg_complexity="$avg_complexity" -v avg_rating="$avg_rating" '
    NR > 1 && $11 != "" && $9 != "" {
        dx = $11 - avg_complexity
        dy = $9 - avg_rating
        sum_xy += dx * dy
        sum_x2 += dx * dx
        sum_y2 += dy * dy
    }
    END {
        if (sum_x2 > 0 && sum_y2 > 0) {
            r = sum_xy / sqrt(sum_x2 * sum_y2)
            printf "The correlation between the complexity of a game and its average rating is %.3f\n", r
        } else {
            print "Insufficient data to compute correlation (Complexity vs Rating)" > "/dev/stderr"
            exit 1
        }
    }
' "$file"
